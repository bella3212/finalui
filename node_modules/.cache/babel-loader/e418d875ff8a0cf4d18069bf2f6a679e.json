{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\GH4123\\\\my-ui\\\\new-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\GH4123\\\\my-ui\\\\new-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\GH4123\\\\my-ui\\\\new-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nexport function getDataFromServer(route) {\n  var _useState = useState([{}]),\n      _useState2 = _slicedToArray(_useState, 2),\n      finalData = _useState2[0],\n      setData = _useState2[1];\n\n  React.useEffect(function effectFunction() {\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(route);\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response.json();\n\n              case 5:\n                data = _context.sent;\n                setData(data.responses);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    fetchData();\n  }, []); //getColumns(finalData)\n\n  return finalData; //list of dict\n}\nexport function getColumns(data) {\n  var columns = [];\n  columns.push(Object.keys(data[0]));\n  /* data.map((raw, index) => {\r\n       columns.push(Object.keys(raw));\r\n       })\r\n       */\n\n  return columns;\n}\nexport function generateData(data) {\n  var formatData = [];\n  var columns;\n  data.map(function (item) {\n    if (item.length > 0) {\n      switch (item.type.normalize()) {\n        case 'table'.normalize():\n          //table\n          columns = getColumns(item); //tables[row.table].append(<Row>row.data</Row>) \n          //formatData.push( <Table columns={columns} data={data_table} columns_name={columns_names} />)\n\n          break;\n      }\n    }\n  }); //     let columns_names=columns=['1','2'];\n  //     let data_table=[{'pk': 1,\n  //     'name': 'bla',\n  //     'type': 'moshe',\n  //     'stam': 'stamv'\n  //     },\n  //    {'pk': 2,\n  //     'name': 'bla2',\n  //     'type': 'moshe2',\n  //     'stam': 'stamv2'\n  //     }]\n  // data.map(function(item){\n  //     switch(item.type.normalize()){\n  //         case 'message'.normalize():\n  //             //title\n  //             containner.append(Tabel)\n  //             tables.append(table)\n  //             //formatData.push( <Title name=\"t_name\" pk={t_id}/>)\n  //             break;\n  //         case 'table'.normalize():\n  //             //table\n  //             row = get_data()\n  //             tables[row.table].append(<Row>row.data</Row>) \n  //             //formatData.push( <Table columns={columns} data={data_table} columns_name={columns_names} />)\n  //             break;\n  //     }\n  // })\n\n  return formatData;\n} // useEffect(() => {\n//     fetch('/table').then(res => res.json()).then(data => {\n//       // Setting a data from api\n//     /*  setdata({\n//         name: data.Name,\n//         age: data.Age,\n//         date: data.Date,\n//         programming: data.programming,\n//     });\n//     */\n//       return data;\n//     });\n//   }, []);","map":{"version":3,"names":["React","useEffect","useState","getDataFromServer","route","finalData","setData","effectFunction","fetchData","fetch","response","json","data","responses","getColumns","columns","push","Object","keys","generateData","formatData","map","item","length","type","normalize"],"sources":["C:/Users/GH4123/my-ui/new-ui/src/utils/dataFromServer.js"],"sourcesContent":["import React, { useEffect , useState} from 'react';\r\n\r\n\r\nexport function getDataFromServer(route){\r\n\r\n   const [finalData, setData] = useState([{}]);\r\n    React.useEffect(function effectFunction() {\r\n        async function fetchData() {\r\n            const response = await fetch(route);\r\n            const data = await response.json();\r\n            setData(data.responses);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n   \r\n    //getColumns(finalData)\r\n    return finalData //list of dict\r\n}\r\n\r\n\r\n\r\n\r\nexport function getColumns(data){\r\n    var columns = [];\r\n    columns.push(Object.keys(data[0]));\r\n   /* data.map((raw, index) => {\r\n        columns.push(Object.keys(raw));\r\n        })\r\n        */\r\n    return columns;\r\n}\r\n\r\n\r\n\r\nexport function generateData(data){\r\n    let formatData=[];\r\n    let columns;\r\n    data.map(function(item){\r\n        if(item.length >0){\r\n            switch(item.type.normalize()){\r\n                case 'table'.normalize():\r\n                    //table\r\n                    columns = getColumns(item) \r\n                    //tables[row.table].append(<Row>row.data</Row>) \r\n                    //formatData.push( <Table columns={columns} data={data_table} columns_name={columns_names} />)\r\n                    break;\r\n                \r\n            }\r\n        }\r\n      \r\n       \r\n        \r\n    })\r\n\r\n\r\n\r\n\r\n//     let columns_names=columns=['1','2'];\r\n//     let data_table=[{'pk': 1,\r\n//     'name': 'bla',\r\n//     'type': 'moshe',\r\n//     'stam': 'stamv'\r\n//     },\r\n//    {'pk': 2,\r\n//     'name': 'bla2',\r\n//     'type': 'moshe2',\r\n//     'stam': 'stamv2'\r\n//     }]\r\n\r\n\r\n    // data.map(function(item){\r\n    //     switch(item.type.normalize()){\r\n    //         case 'message'.normalize():\r\n    //             //title\r\n    //             containner.append(Tabel)\r\n    //             tables.append(table)\r\n    //             //formatData.push( <Title name=\"t_name\" pk={t_id}/>)\r\n    //             break;\r\n    //         case 'table'.normalize():\r\n    //             //table\r\n    //             row = get_data()\r\n    //             tables[row.table].append(<Row>row.data</Row>) \r\n    //             //formatData.push( <Table columns={columns} data={data_table} columns_name={columns_names} />)\r\n    //             break;\r\n            \r\n    //     }\r\n       \r\n        \r\n    // })\r\n\r\n    return formatData;\r\n}\r\n\r\n\r\n    // useEffect(() => {\r\n    //     fetch('/table').then(res => res.json()).then(data => {\r\n    //       // Setting a data from api\r\n    //     /*  setdata({\r\n    //         name: data.Name,\r\n    //         age: data.Age,\r\n    //         date: data.Date,\r\n    //         programming: data.programming,\r\n    //     });\r\n    //     */\r\n    //       return data;\r\n    //     });\r\n    //   }, []);"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,QAA5B,QAA2C,OAA3C;AAGA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAiC;EAAA,gBAERF,QAAQ,CAAC,CAAC,EAAD,CAAD,CAFA;EAAA;EAAA,IAE9BG,SAF8B;EAAA,IAEnBC,OAFmB;;EAGpCN,KAAK,CAACC,SAAN,CAAgB,SAASM,cAAT,GAA0B;IAAA,SACvBC,SADuB;MAAA;IAAA;;IAAA;MAAA,sEACtC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC2BC,KAAK,CAACL,KAAD,CADhC;;cAAA;gBACUM,QADV;gBAAA;gBAAA,OAEuBA,QAAQ,CAACC,IAAT,EAFvB;;cAAA;gBAEUC,IAFV;gBAGIN,OAAO,CAACM,IAAI,CAACC,SAAN,CAAP;;cAHJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CADsC;MAAA;IAAA;;IAMtCL,SAAS;EACZ,CAPD,EAOG,EAPH,EAHoC,CAYpC;;EACA,OAAOH,SAAP,CAboC,CAanB;AACpB;AAKD,OAAO,SAASS,UAAT,CAAoBF,IAApB,EAAyB;EAC5B,IAAIG,OAAO,GAAG,EAAd;EACAA,OAAO,CAACC,IAAR,CAAaC,MAAM,CAACC,IAAP,CAAYN,IAAI,CAAC,CAAD,CAAhB,CAAb;EACD;AACH;AACA;AACA;;EACI,OAAOG,OAAP;AACH;AAID,OAAO,SAASI,YAAT,CAAsBP,IAAtB,EAA2B;EAC9B,IAAIQ,UAAU,GAAC,EAAf;EACA,IAAIL,OAAJ;EACAH,IAAI,CAACS,GAAL,CAAS,UAASC,IAAT,EAAc;IACnB,IAAGA,IAAI,CAACC,MAAL,GAAa,CAAhB,EAAkB;MACd,QAAOD,IAAI,CAACE,IAAL,CAAUC,SAAV,EAAP;QACI,KAAK,QAAQA,SAAR,EAAL;UACI;UACAV,OAAO,GAAGD,UAAU,CAACQ,IAAD,CAApB,CAFJ,CAGI;UACA;;UACA;MANR;IASH;EAIJ,CAfD,EAH8B,CAuBlC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGI;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAGA;;EAEA,OAAOF,UAAP;AACH,C,CAGG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}