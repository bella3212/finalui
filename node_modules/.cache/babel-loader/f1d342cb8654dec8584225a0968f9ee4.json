{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GH4123\\\\my-ui\\\\src\\\\Components\\\\Table.js\";\nimport React from \"react\";\nimport { useTable, useFilters, useGlobalFilter } from 'react-table';\nimport { GlobalFilter, DefaultColumnFilter, fuzzyTextFilterFn, IndeterminateCheckbox } from \"../Filters/Filters\"; // Let the table remove the filter if the string is empty\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n}; // Our table component\n\n\nexport function Table(_ref) {\n  var _this = this;\n\n  var columns = _ref.columns,\n      data = _ref.data,\n      columns_name = _ref.columns_name;\n\n  for (var i = 0; i < columns_name[0].length; i++) {\n    console.log(columns_name[0][i]);\n  }\n\n  columns_name[0].map(function (column) {\n    return console.log(column);\n  });\n  var filterTypes = React.useMemo(function () {\n    return {\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: function text(rows, id, filterValue) {\n        return rows.filter(function (row) {\n          var rowValue = row.values[id];\n          return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n        });\n      }\n    };\n  }, []);\n  var defaultColumn = React.useMemo(function () {\n    return {\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter\n    };\n  }, []);\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    // Be sure to pass the defaultColumn option\n    filterTypes: filterTypes\n  }, useFilters, // useFilters!\n  useGlobalFilter // useGlobalFilter!\n  ),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      prepareRow = _useTable.prepareRow,\n      allColumns = _useTable.allColumns,\n      state = _useTable.state,\n      visibleColumns = _useTable.visibleColumns,\n      getToggleHideAllColumnsProps = _useTable.getToggleHideAllColumnsProps,\n      preGlobalFilteredRows = _useTable.preGlobalFilteredRows,\n      setGlobalFilter = _useTable.setGlobalFilter; // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n\n\n  var firstPageRows = rows.slice(0, 10);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IndeterminateCheckbox, Object.assign({}, getToggleHideAllColumnsProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  })), \" Toggle All\"), allColumns.map(function (column) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: column.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      type: \"checkbox\"\n    }, column.getToggleHiddenProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    })), ' ', column.id));\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }), headerGroup.headers.map(function (column) {\n      return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 19\n        }\n      }), column.render('Header'), /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }\n      }, column.canFilter ? column.render('Filter') : null));\n    }));\n  }), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(GlobalFilter, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }), firstPageRows.map(function (row, i) {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }), row.cells.map(function (cell) {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 28\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, \"Showing the first 20 results of \", rows.length, \" rows\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, JSON.stringify(state.filters, null, 2)))));\n}","map":{"version":3,"names":["React","useTable","useFilters","useGlobalFilter","GlobalFilter","DefaultColumnFilter","fuzzyTextFilterFn","IndeterminateCheckbox","autoRemove","val","Table","columns","data","columns_name","i","length","console","log","map","column","filterTypes","useMemo","fuzzyText","text","rows","id","filterValue","filter","row","rowValue","values","undefined","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","allColumns","state","visibleColumns","getToggleHideAllColumnsProps","preGlobalFilteredRows","setGlobalFilter","firstPageRows","slice","getToggleHiddenProps","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","textAlign","globalFilter","getRowProps","cells","cell","getCellProps","JSON","stringify","filters"],"sources":["C:/Users/GH4123/my-ui/src/Components/Table.js"],"sourcesContent":["import React from \"react\";\r\nimport { useTable, useFilters, useGlobalFilter } from 'react-table'\r\nimport { GlobalFilter, DefaultColumnFilter,  fuzzyTextFilterFn, IndeterminateCheckbox} from \"../Filters/Filters\";\r\n\r\n\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\n\r\n\r\n// Our table component\r\nexport function Table({ columns, data, columns_name }) {\r\n  for(let i = 0; i < columns_name[0].length; i++){ \r\n    console.log(columns_name[0][i])\r\n  }\r\n\r\n\r\n  columns_name[0].map(column => (\r\n    console.log(column)\r\n  )\r\n  )\r\n    const filterTypes = React.useMemo(\r\n      () => ({\r\n        // Add a new fuzzyTextFilterFn filter type.\r\n        fuzzyText: fuzzyTextFilterFn,\r\n        // Or, override the default text filter to use\r\n        // \"startWith\"\r\n        text: (rows, id, filterValue) => {\r\n          return rows.filter(row => {\r\n            const rowValue = row.values[id]\r\n            return rowValue !== undefined\r\n              ? String(rowValue)\r\n                  .toLowerCase()\r\n                  .startsWith(String(filterValue).toLowerCase())\r\n              : true\r\n          })\r\n        },\r\n      }),\r\n      []\r\n    )\r\n  \r\n    const defaultColumn = React.useMemo(\r\n      () => ({\r\n        // Let's set up our default Filter UI\r\n        Filter: DefaultColumnFilter,\r\n      }),\r\n      []\r\n    )\r\n  \r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow,\r\n      allColumns,\r\n      state,\r\n      visibleColumns,\r\n      getToggleHideAllColumnsProps,\r\n      preGlobalFilteredRows,\r\n      setGlobalFilter,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn, // Be sure to pass the defaultColumn option\r\n        filterTypes,\r\n      },\r\n      useFilters, // useFilters!\r\n      useGlobalFilter // useGlobalFilter!\r\n    )\r\n  \r\n    // We don't want to render all of the rows for this example, so cap\r\n    // it for this use case\r\n    const firstPageRows = rows.slice(0, 10)\r\n  \r\n    return (\r\n      <>\r\n       <div>\r\n          <div>\r\n            <IndeterminateCheckbox {...getToggleHideAllColumnsProps()} /> Toggle\r\n            All\r\n          </div>\r\n\r\n\r\n\r\n\r\n          {allColumns.map(column => (\r\n            <div key={column.id}>\r\n              <label>\r\n                <input type=\"checkbox\" {...column.getToggleHiddenProps()} />{' '}\r\n                {column.id}\r\n              </label>\r\n            </div>\r\n          ))}\r\n          <br />\r\n        </div>\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render('Header')}\r\n                    {/* Render the columns filter UI */}\r\n                    <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n            <tr>\r\n              <th\r\n                colSpan={visibleColumns.length}\r\n                style={{\r\n                  textAlign: 'center',\r\n                }}\r\n              >\r\n                <GlobalFilter\r\n                  preGlobalFilteredRows={preGlobalFilteredRows}\r\n                  globalFilter={state.globalFilter}\r\n                  setGlobalFilter={setGlobalFilter}\r\n                />\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {firstPageRows.map((row, i) => {\r\n              prepareRow(row)\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => {\r\n                    return <td  {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  })}\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <br />\r\n        <div>Showing the first 20 results of {rows.length} rows</div>\r\n        <div>\r\n          <pre>\r\n            <code>{JSON.stringify(state.filters, null, 2)}</code>\r\n          </pre>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}