{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GH4123\\\\my-ui\\\\src\\\\Components\\\\Table.js\";\nimport React from \"react\";\nimport { useTable, useFilters, useGlobalFilter } from 'react-table';\nimport { GlobalFilter, DefaultColumnFilter, fuzzyTextFilterFn, IndeterminateCheckbox } from \"../Filters/Filters\"; // Let the table remove the filter if the string is empty\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n}; // Our table component\n\n\nexport function Table(_ref) {\n  var _this = this;\n\n  var columns = _ref.columns,\n      data = _ref.data,\n      columns_name = _ref.columns_name;\n  var filterTypes = React.useMemo(function () {\n    return {\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: function text(rows, id, filterValue) {\n        return rows.filter(function (row) {\n          var rowValue = row.values[id];\n          return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n        });\n      }\n    };\n  }, []);\n  var defaultColumn = React.useMemo(function () {\n    return {\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter\n    };\n  }, []);\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    // Be sure to pass the defaultColumn option\n    filterTypes: filterTypes\n  }, useFilters, // useFilters!\n  useGlobalFilter // useGlobalFilter!\n  ),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      prepareRow = _useTable.prepareRow,\n      allColumns = _useTable.allColumns,\n      state = _useTable.state,\n      visibleColumns = _useTable.visibleColumns,\n      getToggleHideAllColumnsProps = _useTable.getToggleHideAllColumnsProps,\n      preGlobalFilteredRows = _useTable.preGlobalFilteredRows,\n      setGlobalFilter = _useTable.setGlobalFilter; // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n\n\n  var firstPageRows = rows.slice(0, 10); // var divElement = document.createElement(\"Div\");\n  // divElement.id = \"divID\";\n  // var divElement2 = document.createElement(\"Div\");\n  // divElement2.id = \"divID2\";\n  // var indeterminateCheckbox = document.createElement(\"input\");\n  //    var container = document.getElementById('toggle_columns');\n  // for(let i = 0; i < columns_name[0].length; i++){ \n  //   // console.log(columns_name[0][i])\n  //   //container.append('<div> key=' + columns_name[0][i] +\">\");\n  //   //container.append(\"</div\")\n  //   var divElement = document.createElement(\"Div\");\n  //   divElement.key = columns_name[0][i];\n  //   var labelElement = document.createElement(\"label\");\n  //  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"toggle_columns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IndeterminateCheckbox, Object.assign({}, getToggleHideAllColumnsProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  })), \" Toggle All\"), allColumns.map(function (column) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: column.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      type: \"checkbox\"\n    }, column.getToggleHiddenProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    })), ' ', column.id);\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    }), headerGroup.headers.map(function (column) {\n      return /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 19\n        }\n      }), column.render('Header'), /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }, column.canFilter ? column.render('Filter') : null));\n    }));\n  }), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(GlobalFilter, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }), firstPageRows.map(function (row, i) {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }), row.cells.map(function (cell) {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 28\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, \"Showing the first 20 results of \", rows.length, \" rows\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, JSON.stringify(state.filters, null, 2)))));\n}","map":{"version":3,"names":["React","useTable","useFilters","useGlobalFilter","GlobalFilter","DefaultColumnFilter","fuzzyTextFilterFn","IndeterminateCheckbox","autoRemove","val","Table","columns","data","columns_name","filterTypes","useMemo","fuzzyText","text","rows","id","filterValue","filter","row","rowValue","values","undefined","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","allColumns","state","visibleColumns","getToggleHideAllColumnsProps","preGlobalFilteredRows","setGlobalFilter","firstPageRows","slice","map","column","getToggleHiddenProps","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","length","textAlign","globalFilter","i","getRowProps","cells","cell","getCellProps","JSON","stringify","filters"],"sources":["C:/Users/GH4123/my-ui/src/Components/Table.js"],"sourcesContent":["import React from \"react\";\r\nimport { useTable, useFilters, useGlobalFilter } from 'react-table'\r\nimport { GlobalFilter, DefaultColumnFilter,  fuzzyTextFilterFn, IndeterminateCheckbox} from \"../Filters/Filters\";\r\n\r\n\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\n\r\n\r\n// Our table component\r\nexport function Table({ columns, data, columns_name }) {\r\n    const filterTypes = React.useMemo(\r\n      () => ({\r\n        // Add a new fuzzyTextFilterFn filter type.\r\n        fuzzyText: fuzzyTextFilterFn,\r\n        // Or, override the default text filter to use\r\n        // \"startWith\"\r\n        text: (rows, id, filterValue) => {\r\n          return rows.filter(row => {\r\n            const rowValue = row.values[id]\r\n            return rowValue !== undefined\r\n              ? String(rowValue)\r\n                  .toLowerCase()\r\n                  .startsWith(String(filterValue).toLowerCase())\r\n              : true\r\n          })\r\n        },\r\n      }),\r\n      []\r\n    )\r\n  \r\n    const defaultColumn = React.useMemo(\r\n      () => ({\r\n        // Let's set up our default Filter UI\r\n        Filter: DefaultColumnFilter,\r\n      }),\r\n      []\r\n    )\r\n  \r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      rows,\r\n      prepareRow,\r\n      allColumns,\r\n      state,\r\n      visibleColumns,\r\n      getToggleHideAllColumnsProps,\r\n      preGlobalFilteredRows,\r\n      setGlobalFilter,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn, // Be sure to pass the defaultColumn option\r\n        filterTypes,\r\n      },\r\n      useFilters, // useFilters!\r\n      useGlobalFilter // useGlobalFilter!\r\n    )\r\n  \r\n    // We don't want to render all of the rows for this example, so cap\r\n    // it for this use case\r\n    const firstPageRows = rows.slice(0, 10)\r\n\r\n\r\n\r\n    // var divElement = document.createElement(\"Div\");\r\n    // divElement.id = \"divID\";\r\n    // var divElement2 = document.createElement(\"Div\");\r\n    // divElement2.id = \"divID2\";\r\n    // var indeterminateCheckbox = document.createElement(\"input\");\r\n\r\n    //    var container = document.getElementById('toggle_columns');\r\n    // for(let i = 0; i < columns_name[0].length; i++){ \r\n    //   // console.log(columns_name[0][i])\r\n    //   //container.append('<div> key=' + columns_name[0][i] +\">\");\r\n    //   //container.append(\"</div\")\r\n    //   var divElement = document.createElement(\"Div\");\r\n    //   divElement.key = columns_name[0][i];\r\n    //   var labelElement = document.createElement(\"label\");\r\n    //  }\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n       <div id=\"toggle_columns\">\r\n          <div>\r\n            <IndeterminateCheckbox {...getToggleHideAllColumnsProps()} /> Toggle\r\n            All\r\n          </div>\r\n          {allColumns.map(column => (\r\n            <div key={column.id}>\r\n              \r\n                <input type=\"checkbox\" {...column.getToggleHiddenProps()} />{' '}\r\n                {column.id}\r\n              \r\n            </div>\r\n          ))}\r\n          <br />\r\n        </div>\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render('Header')}\r\n                    {/* Render the columns filter UI */}\r\n                    <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n            <tr>\r\n              <th\r\n                colSpan={visibleColumns.length}\r\n                style={{\r\n                  textAlign: 'center',\r\n                }}\r\n              >\r\n                <GlobalFilter\r\n                  preGlobalFilteredRows={preGlobalFilteredRows}\r\n                  globalFilter={state.globalFilter}\r\n                  setGlobalFilter={setGlobalFilter}\r\n                />\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {firstPageRows.map((row, i) => {\r\n              prepareRow(row)\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => {\r\n                    return <td  {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  })}\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <br />\r\n        <div>Showing the first 20 results of {rows.length} rows</div>\r\n        <div>\r\n          <pre>\r\n            <code>{JSON.stringify(state.filters, null, 2)}</code>\r\n          </pre>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}